name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.0.0)"
        required: true
        type: string

jobs:
  # Validate and test all packages
  validate:
    name: Validate and Test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          cache: true

      - name: Setup Melos
        run: dart pub global activate melos

      - name: Bootstrap workspace
        run: melos bootstrap

      - name: Get version from tag or input
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      - name: Analyze packages
        run: melos run analyze

      - name: Format check
        run: melos run format

      - name: Run tests
        run: melos run test

      - name: Generate code
        run: melos run generate

  # Create GitHub release
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: validate

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the latest tag before current
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          # Generate changelog
          CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)

          # Save to file for release
          cat > RELEASE_NOTES.md << EOF
          ## What's Changed

          ${CHANGELOG}

          ## Package Versions

          EOF

          # Add package versions to release notes
          for package in packages/*/; do
            if [ -f "${package}pubspec.yaml" ]; then
              VERSION=$(grep '^version:' ${package}pubspec.yaml | cut -d' ' -f2)
              PACKAGE_NAME=$(grep '^name:' ${package}pubspec.yaml | cut -d' ' -f2)
              echo "- **${PACKAGE_NAME}**: ${VERSION}" >> RELEASE_NOTES.md
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update documentation
  update-docs:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: [validate, release]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update CHANGELOG.md
        run: |
          # Create or update CHANGELOG.md
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi

          # Add new release section
          VERSION="${{ needs.validate.outputs.version }}"
          DATE=$(date +%Y-%m-%d)

          # Create temp file with new content
          echo "# Changelog" > CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "All notable changes to this project will be documented in this file." >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "## [${VERSION}] - ${DATE}" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md

          # Get changes since last tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s" --no-merges >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md
          echo "" >> CHANGELOG_NEW.md

          # Append existing changelog (skip first 4 lines if file exists)
          if [ -f CHANGELOG.md ]; then
            tail -n +5 CHANGELOG.md >> CHANGELOG_NEW.md
          fi

          mv CHANGELOG_NEW.md CHANGELOG.md

      - name: Commit and push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          if ! git diff --staged --quiet; then
            git commit -m "chore: update CHANGELOG for ${{ needs.validate.outputs.version }}"
            git push origin main
          fi
